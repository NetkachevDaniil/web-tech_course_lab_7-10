// comboValidation.js - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–±–æ –∏ –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
document.addEventListener('DOMContentLoaded', function() {
    console.log('comboValidation.js –∑–∞–≥—Ä—É–∂–µ–Ω');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è selectedDishes (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–æ)
    if (!window.selectedDishes) {
        window.selectedDishes = {
            soup: null,
            main: null,
            salad: null,
            drink: null,
            dessert: null
        };
    }

    // –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ (dessert –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω)
    const availableCombos = [
        { id: 1, soup: true,  main: true,  salad: true,  drink: true  },
        { id: 2, soup: true,  main: true,  salad: false, drink: true  },
        { id: 3, soup: true,  main: false, salad: true,  drink: true  },
        { id: 4, soup: false, main: true,  salad: true,  drink: true  },
        { id: 5, soup: false, main: true,  salad: false, drink: true  }
    ];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–º–±–æ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º dessert)
    function isValidCombo() {
        const hasSoup = !!window.selectedDishes.soup;
        const hasMain = !!window.selectedDishes.main;
        const hasSalad = !!window.selectedDishes.salad;
        const hasDrink = !!window.selectedDishes.drink;

        return availableCombos.some(combo =>
            combo.soup === hasSoup &&
            combo.main === hasMain &&
            combo.salad === hasSalad &&
            combo.drink === hasDrink
        );
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª –∏–∑ –∑–∞–¥–∞–Ω–∏—è)
    function getNotificationType() {
        const hasSoup = !!window.selectedDishes.soup;
        const hasMain = !!window.selectedDishes.main;
        const hasSalad = !!window.selectedDishes.salad;
        const hasDrink = !!window.selectedDishes.drink;
        const hasDessert = !!window.selectedDishes.dessert;

        const hasAnyDish = hasSoup || hasMain || hasSalad || hasDrink || hasDessert;

        if (!hasAnyDish) {
            return { type: 'nothing-selected', message: '–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞', emoji: 'üö´' };
        }

        // –ü—Ä–∞–≤–∏–ª–æ 2: –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫ ‚Äî –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ, –∫—Ä–æ–º–µ –Ω–∞–ø–∏—Ç–∫–∞ (–≤ –ø—Ä–æ—Å—Ç–µ–π—à–µ–º —Å–º—ã—Å–ª–µ: –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–µ–±—É–µ—Ç drink)
        // –ù–æ –ø—Ä–æ—â–µ ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∞–ø–∏—Ç–∫–∞, –∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã —á—Ç–æ-—Ç–æ ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø–∏—Ç–æ–∫.
        if (!hasDrink) {
            return { type: 'select-drink', message: '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫', emoji: 'ü•§' };
        }

        // –ü—Ä–∞–≤–∏–ª–æ 3: –≤—ã–±—Ä–∞–Ω —Å—É–ø, –Ω–æ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –≥–ª–∞–≤–Ω–æ–µ –±–ª—é–¥–æ/—Å–∞–ª–∞—Ç/—Å—Ç–∞—Ä—Ç–µ—Ä
        if (hasSoup && !hasMain && !hasSalad) {
            return { type: 'select-main-or-salad', message: '–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –±–ª—é–¥–æ/—Å–∞–ª–∞—Ç/—Å—Ç–∞—Ä—Ç–µ—Ä', emoji: 'üçΩÔ∏è' };
        }

        // –ü—Ä–∞–≤–∏–ª–æ 4: –≤—ã–±—Ä–∞–Ω —Å–∞–ª–∞—Ç/—Å—Ç–∞—Ä—Ç–µ—Ä, –Ω–æ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã —Å—É–ø/–≥–ª–∞–≤–Ω–æ–µ –±–ª—é–¥–æ
        if (hasSalad && !hasSoup && !hasMain) {
            return { type: 'select-soup-or-main', message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–ø –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –±–ª—é–¥–æ', emoji: 'üç≤' };
        }

        // –ü—Ä–∞–≤–∏–ª–æ 5: –≤—ã–±—Ä–∞–Ω –Ω–∞–ø–∏—Ç–æ–∫/–¥–µ—Å–µ—Ä—Ç, –Ω–æ –Ω–µ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –±–ª—é–¥–∞
        if ((hasDrink || hasDessert) && !hasMain && !hasSoup && !hasSalad) {
            return { type: 'select-main', message: '–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –±–ª—é–¥–æ', emoji: 'üçõ' };
        }

        // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –∑–Ω–∞—á–∏—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å availableCombos
        return { type: 'invalid-combo', message: '–í—ã–±—Ä–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–±–æ', emoji: '‚ùå' };
    }

    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
    function showNotification(notificationData) {
        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å overlay ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π
        if (document.querySelector('.notification-overlay')) return;

        const overlay = document.createElement('div');
        overlay.className = 'notification-overlay';
        overlay.innerHTML = `
            <div class="notification" role="dialog" aria-live="assertive" aria-modal="true">
                <div class="notification-image">
                    <span style="font-size: 3rem;">${notificationData.emoji}</span>
                </div>
                <p>${notificationData.message}</p>
                <button class="notification-ok-btn" type="button">–û–∫–µ–π</button>
            </div>
        `;

        document.body.appendChild(overlay);
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ
        const prevOverflow = document.body.style.overflow;
        document.body.style.overflow = 'hidden';

        const okButton = overlay.querySelector('.notification-ok-btn');

        function closeNotification() {
            if (!overlay.parentNode) return;
            overlay.parentNode.removeChild(overlay);
            document.body.style.overflow = prevOverflow || '';
            document.removeEventListener('keydown', escapeHandler);
        }

        okButton.addEventListener('click', closeNotification);

        // hover —ç—Ñ—Ñ–µ–∫—Ç—ã inline (–≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ css) ‚Äî –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        okButton.addEventListener('mouseenter', function() {
            this.style.backgroundColor = '#e74c3c';
            this.style.color = 'white';
            this.style.borderColor = '#e74c3c';
        });
        okButton.addEventListener('mouseleave', function() {
            this.style.backgroundColor = '';
            this.style.color = '';
            this.style.borderColor = '';
        });

        overlay.addEventListener('click', function(e) {
            if (e.target === overlay) {
                closeNotification();
            }
        });

        function escapeHandler(e) {
            if (e.key === 'Escape') {
                closeNotification();
            }
        }
        document.addEventListener('keydown', escapeHandler);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    function validateForm(event) {
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–±–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ä–º—ã');
        // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏–º hidden-–ø–æ–ª—è (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Å–∫—Ä–∏–ø—Ç—ã –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ–≥–æ)
        try {
            const soupSelect = document.getElementById('soup-select');
            const mainSelect = document.getElementById('main-course-select');
            const saladSelect = document.getElementById('salad-select');
            const drinkSelect = document.getElementById('drink-select');
            const dessertSelect = document.getElementById('dessert-select');

            if (soupSelect) soupSelect.value = window.selectedDishes.soup ? window.selectedDishes.soup.keyword : '';
            if (mainSelect) mainSelect.value = window.selectedDishes.main ? window.selectedDishes.main.keyword : '';
            if (saladSelect) saladSelect.value = window.selectedDishes.salad ? window.selectedDishes.salad.keyword : '';
            if (drinkSelect) drinkSelect.value = window.selectedDishes.drink ? window.selectedDishes.drink.keyword : '';
            if (dessertSelect) dessertSelect.value = window.selectedDishes.dessert ? window.selectedDishes.dessert.keyword : '';
        } catch (err) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å hidden-–ø–æ–ª—è', err);
        }

        if (!isValidCombo()) {
            event.preventDefault(); // –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
            const notificationData = getNotificationType();
            showNotification(notificationData);
            // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            return false;
        }

        // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–Ω–æ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º (—Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –Ω–∞ action)
        console.log('–ö–æ–º–±–æ –≤–∞–ª–∏–¥–Ω–æ, —Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
        return true;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    function init() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–±–æ');

        const orderForm = document.getElementById('order-form');
        if (orderForm) {
            // –ü–æ–¥–≤–µ—à–∏–≤–∞–µ–º submit –≤ –Ω–∞—á–∞–ª–µ ‚Äî –æ–Ω –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –∫–æ–¥–æ–º
            orderForm.addEventListener('submit', validateForm, { passive: false });
        } else {
            console.warn('–§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ (#order-form) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
        }

        // –î–æ–ø. –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞: –µ—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª–∞—Å—Å–æ–º .reset-btn
        const resetBtn = document.querySelector('.reset-btn');
        if (resetBtn) {
            resetBtn.addEventListener('click', function(e) {
                // –ï—Å–ª–∏ resetOrder –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ (–≤ HTML —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è), –≤—ã–∑–æ–≤–µ–º –µ—ë
                if (typeof resetOrder === 'function') {
                    resetOrder();
                } else {
                    // –í—Ä—É—á–Ω—É—é —Å–±—Ä–æ—Å–∏–º
                    window.selectedDishes = { soup: null, main: null, salad: null, drink: null, dessert: null };
                    if (typeof window.updateOrderDisplay === 'function') {
                        window.updateOrderDisplay();
                    }
                    const form = document.getElementById('order-form');
                    if (form) form.reset();
                    const cc = document.getElementById('char-count');
                    if (cc) cc.textContent = '0';
                }
            });
        }
    }

    init();
});
